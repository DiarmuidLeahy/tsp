package travellingSalesmanProblem;
import lab5.FileIO;

import java.util.ArrayList;
public class TSP
{
	public static final double R = 6372.8;// In kilometers
	//public static Node [] towns = new Node [80];
	public static void main(String args[])
	{
		FileIO reader = new FileIO();
		ArrayList <Integer> route = new ArrayList <Integer>();
		String[] inputs = reader.load("C:/Users/Derri_000/Documents/Document.tsv");
		Node Abbeyfeale = new Node(1,"Abbeyfeale",52.386,-9.294);
		Node Adare = new Node(2,"Adare",52.564,-8.79);
		Node Arklow = new Node(3,"arklow",52.794,-6.165);
		Node Armagh= new Node(4,"Armagh",54.35,-6.655);
		Node Athlone= new Node(5,"Athlone",53.433,-7.95);
		Node Athy= new Node(6,"Athy",52.992,-6.987);
		Node Ballina= new Node(7,"Ballina",54.117,-9.167);
		Node Ballinrobe= new Node(8,"Ballinrobe",53.633,-9.233);
		Node Ballybofe= new Node(9,"Ballybofe",54.8,-7.79);
		Node Ballymena= new Node(10,"Ballymena",54.863,-6.284);
		Node Ballymoney= new Node(11,"Ballymoney",55.071,-6.508);
		Node Gorey = new Node(40,"gorey",52.677,-6.292);
		Node Newcastle = new Node(63,"newcastle",54.21,-5.882);
		Node [] towns = {Abbeyfeale,Adare,Arklow,Armagh,Athlone,Athy,Ballina,Ballinrobe,Ballybofe,Ballymena,Ballymoney,Newcastle,Gorey};
		System.out.println("Distance between Gorey and Arklow is "+String.format("%.3f",dist(Gorey.latitude,Gorey.longitude,Arklow.latitude,Arklow.longitude))+"km");
		System.out.println("The closest town to Ballybofe is "+findClosest(Ballybofe,towns).name);
	}
	/**
	 * This method calculates the distance between two towns when the longitudes & latitudes are entered
	 * @param lat1 latitude of first town
	 * @param lon1 longitude of first town
	 * @param lat2 latitude of second town
	 * @param lon2 longitude of second town
	 * @return double distance in kilometers
	 */
	public static double dist(double lat1, double lon1, double lat2, double lon2)
	{
	   	double dLat = Math.toRadians(lat2 - lat1);
	   	double dLon = Math.toRadians(lon2 - lon1);
	    lat1 = Math.toRadians(lat1);
	    lat2 = Math.toRadians(lat2);
	 
	    double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
	    double c = 2 * Math.asin(Math.sqrt(a));
	    return R * c;
    }
	/**
	 * This method returns the town which is closest to the current town entered
	 * @param current This is the town of which you want to find the closest other town to
	 * @param list This is an array of all possible towns
	 * @return Node representing the closest town
	 */
	public static Node findClosest(Node current,Node[] list)
	{
		Node closest=new Node();
		double length=100000.0;	//arbitrary length great enough so that all distances will be smaller than it
		for(int i=0;i<list.length;i++)
		{
			System.out.println(dist(current.latitude,current.longitude,list[i].latitude,list[i].longitude));
			if(dist(current.latitude,current.longitude,list[i].latitude,list[i].longitude)<length && dist(current.latitude,current.longitude,list[i].latitude,list[i].longitude)!=0.0)
			{
				length=dist(current.latitude,current.longitude,list[i].latitude,list[i].longitude);
				closest=list[i];
			}
		}
		return closest;
	}
}
